{"version":3,"sources":["Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputValue","setInputValue","list","localStorage","getItem","JSON","parse","localstorageData","item","setItem","editState","setEditState","isEdit","setIsEdit","addItem","map","ele","id","name","yourData","Date","getTime","toString","alert","useEffect","stringify","className","type","value","onChange","e","target","alt","placeholder","onClick","curEle","itemTodoEdit","find","curElem","editMe","index","deleteItem","filter","itemDelete","reverse","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAwGeA,EA3FF,WAET,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsBF,mBAXD,WACrB,IAAMG,EAAMC,aAAaC,QAAQ,QACjC,OAAGF,EACQG,KAAKC,MAAMJ,GAEf,GAMwBK,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAA0BZ,mBAAS,IAAnC,mBAAOa,EAAP,KAAcC,EAAd,KAGMC,EAAU,WACZ,GAAId,EAEE,GAAGA,GAAcU,EACpBD,EACID,EAAKO,KAAI,SAAAC,GACL,OAAGA,EAAIC,KAAOL,EACH,2BAAII,GAAX,IAAeE,KAAMlB,IAElBgB,MAGfL,GAAa,GACbV,EAAc,QACX,CACF,IAAMkB,EAAU,CACZF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMlB,GAEVS,EAAQ,GAAD,mBAAKD,GAAL,CAAUW,KACjBlB,EAAc,SAlBdsB,MAAM,qBAoDd,OAZAC,qBAAU,WACRrB,aAAaM,QAAQ,OAAOJ,KAAKoB,UAAUjB,MAC3C,CAACA,IAWC,mCACC,qBAAKkB,UAAU,WAAf,SACI,sBAAKA,UAAU,OAAf,UACI,wDACA,uBAAOC,KAAK,OAAOC,MAAO5B,EAAY6B,SAAU,SAACC,GAAD,OAAM7B,EAAc6B,EAAEC,OAAOH,QAAQI,IAAI,WAAWC,YAAY,6BAC/GvB,EACD,wBAAQwB,QAASpB,EAASY,UAAU,UAApC,uBACA,wBAAQQ,QAASpB,EAASY,UAAU,UAApC,sBAEClB,EAAKO,KAAI,SAACoB,GACR,OACC,sBAAKT,UAAU,OAAf,UACA,+BAAOS,EAAOjB,OACd,wBAAQQ,UAAU,OAAOQ,QAAS,kBAnCpC,SAAClB,GACX,IAAMoB,EAAe5B,EAAK6B,MAAK,SAAAC,GAC3B,OAAOA,EAAQrB,KAAOD,EAAIC,MAE9BJ,EAAUG,EAAIC,IACdhB,EAAcmC,EAAalB,MAC3BP,GAAa,GA6BsC4B,CAAOJ,IAA9C,SAAuD,cAAC,IAAD,MACvD,wBAAQT,UAAU,OAAOQ,QAAS,kBA7ChC,SAACM,GAChBvC,EAAc,IAChB,IAAMwC,EAAYjC,EAAKkC,QAAO,SAAAP,GAC1B,OAAOA,EAAOlB,KAAOuB,KAEzB/B,EAAQgC,GACR9B,GAAa,GAuCyCgC,CAAWR,EAAOlB,KAAzD,SAA8D,cAAC,IAAD,QAHnCkB,EAAOlB,OAMnC2B,UACH,uBACiB,IAAhBpC,EAAKqC,OACN,GAAG,wBAAQX,QAAS,kBAAKzB,EAAQ,KAAKiB,UAAU,QAA7C,gCCrFLoB,EARH,WACV,OACE,mCACG,cAAC,EAAD,OCMQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2a768beb.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {MdDelete} from 'react-icons/md';\r\nimport {FiEdit} from 'react-icons/fi'\r\nimport \"./App.css\"\r\n\r\nconst localstorageData = () =>{\r\n    const list =localStorage.getItem(\"todo\");\r\n    if(list){\r\n        return JSON.parse(list)\r\n    }\r\n    return [];\r\n}\r\n\r\nconst Todo = () => {\r\n\r\n    const [inputValue,setInputValue] =useState('');\r\n    const [item,setItem] =useState(localstorageData());\r\n    const [editState,setEditState] =useState(false);\r\n    const [isEdit,setIsEdit] =useState('')\r\n\r\n    //add the item\r\n    const addItem = () =>{\r\n        if(!inputValue){\r\n            alert(\"fill the data...\")\r\n        }else if(inputValue && editState){\r\n           setItem(\r\n               item.map(ele =>{\r\n                   if(ele.id === isEdit){\r\n                       return {...ele,name: inputValue}\r\n                   }\r\n                   return ele;\r\n                })\r\n           )\r\n           setEditState(false)\r\n           setInputValue('')\r\n        } else{\r\n            const yourData ={\r\n                id: new Date().getTime().toString(),\r\n                name: inputValue\r\n            }\r\n            setItem([...item,yourData]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n    //delete the item \r\n    const itemDelete = (index) =>{\r\n        setInputValue('')\r\n      const deleteItem =item.filter(curEle =>{\r\n          return curEle.id !== index ;\r\n      });\r\n      setItem(deleteItem);\r\n      setEditState(false)\r\n    }\r\n\r\n    const editMe = (ele) =>{\r\n         const itemTodoEdit = item.find(curElem =>{\r\n             return curElem.id === ele.id ;\r\n         })\r\n         setIsEdit(ele.id);\r\n         setInputValue(itemTodoEdit.name)\r\n         setEditState(true)\r\n    }\r\n\r\n    useEffect(()=>{\r\n      localStorage.setItem(\"todo\",JSON.stringify(item))\r\n    },[item]);\r\n\r\n    // useEffect(() =>{\r\n    //     const myLocalStorageData =localStorage.getItem(\"todo\");\r\n    //     console.log({myLocalStorageData});\r\n    //     if(myLocalStorageData){\r\n    //         setItem(JSON.parse(myLocalStorageData));\r\n    //     }\r\n    // },[]);\r\n\r\n    return (\r\n        <>\r\n         <div className=\"main-div\">\r\n             <div className=\"div2\">\r\n                 <h1>TODO LIST üìù</h1>\r\n                 <input type=\"text\" value={inputValue} onChange={(e) =>setInputValue(e.target.value)} alt=\"tododata\" placeholder=\"‚úç write the item...\"/>\r\n                 {editState ?\r\n                 <button onClick={addItem} className=\"div2btn\">Edit item</button> :\r\n                 <button onClick={addItem} className=\"div2btn\">Add item</button>\r\n                 }\r\n                 {item.map((curEle) =>{\r\n                    return(\r\n                     <div className=\"div3\" key={curEle.id}>\r\n                     <span>{curEle.name}</span>\r\n                     <button className=\"btn1\" onClick={() =>editMe(curEle)}><FiEdit/></button>\r\n                     <button className=\"btn2\" onClick={() =>itemDelete(curEle.id)}><MdDelete/></button>\r\n                     </div>\r\n                    )\r\n                 }).reverse()}\r\n                 <br/>\r\n                 {item.length === 0 ?\r\n                 \"\":<button onClick={() =>setItem([])} className=\"rmbtn\">Remove All</button>\r\n                 }\r\n             </div>\r\n         </div>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\nimport Todo from './Todo'\n\nconst App = () => {\n  return (\n    <>\n       <Todo/>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}